package com.coinwallet.common.util;import java.security.DigestException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Map;public class Sha1 {    private static final String key = "X4buhBMG";    public static String SHA1(String paramJson, String version, String platform) throws DigestException {        if ("Android".equalsIgnoreCase(platform)) platform = "add";        String decrypt = paramJson + "&oB" + platform + key + version;        try {            MessageDigest digest = MessageDigest.getInstance("SHA-1");            digest.update(decrypt.getBytes());            byte messageDigest[] = digest.digest();            StringBuffer hexString = new StringBuffer();            for (int i = 0; i < messageDigest.length; i++) {                String shaHex = Integer.toHexString(messageDigest[i] & 0xFF);                if (shaHex.length() < 2) {                    hexString.append(0);                }                hexString.append(shaHex);            }            return hexString.toString();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();            throw new DigestException("sign error！");        }    }    private static String getOrderByLexicographic(Map<String, Object> maps) {        return splitParams(lexicographicOrder(getParamsName(maps)), maps);    }    private static List<String> getParamsName(Map<String, Object> maps) {        List<String> paramNames = new ArrayList<String>();        for (Map.Entry<String, Object> entry : maps.entrySet()) {            paramNames.add(entry.getKey());        }        return paramNames;    }    private static List<String> lexicographicOrder(List<String> paramNames) {        Collections.sort(paramNames);        return paramNames;    }    private static String splitParams(List<String> paramNames, Map<String, Object> maps) {        StringBuilder paramStr = new StringBuilder();        for (String paramName : paramNames) {            paramStr.append(paramName);            for (Map.Entry<String, Object> entry : maps.entrySet()) {                if (paramName.equals(entry.getKey())) {                    paramStr.append(String.valueOf(entry.getValue()));                }            }        }        return paramStr.toString();    }}